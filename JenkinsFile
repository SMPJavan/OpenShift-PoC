node ('master') {
    def app
    
    def server = Artifactory.server "jbossbuild01"
    // Create an Artifactory Maven instance.
    def rtMaven = Artifactory.newMavenBuild()
    
    def deployableGroupId = "$deployableGroupId"
    def deployableArtifactId = "$deployableArtifactId"
    def deployableVersion = "$deployableVersion"
    def deployableType = "$deployableType"
    
    def imageName = "$deployableArtifactId".toLowerCase()
	
    stage('Clone repository') {
        /* Let's make sure we have the repository cloned to our workspace */
        deleteDir()
        checkout scm
    }

    stage('Artifactory configuration') {
        // Tool name from Jenkins configuration
        rtMaven.tool = "Maven"
        // Set Artifactory repositories for dependencies resolution and artifacts deployment.
        rtMaven.deployer releaseRepo:'libs-release-local', snapshotRepo:'libs-snapshot-local', server: server
        rtMaven.resolver releaseRepo:'libs-release', snapshotRepo:'libs-snapshot', server: server
    }
	
	stage('Get deployable') {
		rtMaven.run pom: 'pom.xml', goals: "clean install -U -Ddeployable.group.id=" + deployableGroupId + " -Ddeployable.artifact.id=" + deployableArtifactId + " -Ddeployable.version=" + deployableVersion + " -Ddeployable.type=" + deployableType
	}

    stage('Build image') {
        /* This builds the actual image; synonymous to
         * docker build on the command line */		
			bat "docker build -f $imageType . -t  " + imageName + ":$deployableVersion"
    }
	
	stage('Deploy image') {
			bat "docker login --username=pusher $openshiftDockerRegistry -p $openshiftDeployerPassword"
			bat "docker tag " + imageName + ":$deployableVersion $openshiftDockerRegistry/pushed/" + imageName + "-$environment"
			bat "docker push $openshiftDockerRegistry/pushed/" + imageName + "-$environment"
	}
}